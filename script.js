let mediaInfoInstance = null;
let currentFileData = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MediaInfo
async function initMediaInfo() {
    try {
        mediaInfoInstance = await MediaInfo.default({
            locateFile: (path, prefix) => {
                return 'https://unpkg.com/mediainfo.js/dist/' + path;
            }
        });
        console.log('MediaInfo –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MediaInfo:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', () => {
    initMediaInfo();
    initEventListeners();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function initEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    const uploadArea = document.getElementById('uploadArea');
    const fileInput = document.getElementById('fileInput');

    // Drag & Drop —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.classList.add('drag-over');
    });

    uploadArea.addEventListener('dragleave', () => {
        uploadArea.classList.remove('drag-over');
    });

    uploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.classList.remove('drag-over');
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            handleFile(files[0]);
        }
    });

    fileInput.addEventListener('change', (e) => {
        if (e.target.files.length > 0) {
            handleFile(e.target.files[0]);
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
async function handleFile(file) {
    if (!mediaInfoInstance) {
        alert('MediaInfo –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    const maxSize = 24 * 1024 * 1024 * 1024; // 24GB –ª–∏–º–∏—Ç
    if (file.size > maxSize) {
        alert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 24GB');
        return;
    }

    currentFileData = file;
    showLoading();
    updateProgress(0, '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞–Ω–∞–ª–∏–∑—É...');

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–∞–º—è—Ç—å (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        if ('memory' in performance) {
            const memInfo = performance.memory;
            const availableMemory = memInfo.jsHeapSizeLimit - memInfo.usedJSHeapSize;
            if (file.size > availableMemory * 0.5) {
                console.warn('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏');
            }
        }

        // –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (>100MB) –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ç–æ–∫–æ–≤–æ–µ —á—Ç–µ–Ω–∏–µ
        const isLargeFile = file.size > 100 * 1024 * 1024;
        let result;

        if (isLargeFile) {
            result = await analyzeFileInChunks(file);
        } else {
            // –î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–ª–∏–∫–æ–º
            updateProgress(50, '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...');
            const arrayBuffer = await file.arrayBuffer();
            const uint8Array = new Uint8Array(arrayBuffer);

            updateProgress(80, '–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞...');
            result = await mediaInfoInstance.analyzeData(
                () => uint8Array.length,
                (size, offset) => uint8Array.slice(offset, offset + size)
            );
        }

        console.log('MediaInfo result:', result);
        updateProgress(100, '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        setTimeout(() => displayResults(file, result), 500);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞:', error);
        if (error.name === 'QuotaExceededError' || error.message.includes('memory')) {
            alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–∫–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–∞–π–ª –ø–æ–º–µ–Ω—å—à–µ.');
        } else if (error.name === 'NotAllowedError') {
            alert('–î–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.');
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: ' + error.message);
        }
        hideLoading();
    }
}

// –ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ —á–∞—Å—Ç—è–º
async function analyzeFileInChunks(file) {
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    let chunkSize;
    if (file.size > 1024 * 1024 * 1024) { // >1GB
        chunkSize = 1024 * 1024; // 1MB chunks –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    } else if (file.size > 500 * 1024 * 1024) { // >500MB
        chunkSize = 512 * 1024; // 512KB chunks
    } else {
        chunkSize = 64 * 1024; // 64KB chunks –¥–ª—è —Ñ–∞–π–ª–æ–≤ <500MB
    }
    
    const fileSize = file.size;
    let offset = 0;
    
    updateProgress(10, '–ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞...');

    // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è MediaInfo
    const getSize = () => fileSize;
    const readChunk = async (size, fileOffset) => {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        const progress = Math.min(10 + (fileOffset / fileSize) * 70, 80);
        updateProgress(progress, `–û–±—Ä–∞–±–æ—Ç–∫–∞: ${formatFileSize(fileOffset)} –∏–∑ ${formatFileSize(fileSize)}`);

        const start = fileOffset;
        const end = Math.min(start + size, fileSize);
        const chunk = file.slice(start, end);
        const arrayBuffer = await chunk.arrayBuffer();
        return new Uint8Array(arrayBuffer);
    };

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
    const result = await mediaInfoInstance.analyzeData(getSize, readChunk);
    return result;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function displayResults(file, mediaInfo) {
    hideLoading();
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
    document.getElementById('uploadSection').style.display = 'none';
    
    // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
    document.getElementById('fileName').textContent = file.name;
    document.getElementById('fileSize').textContent = formatFileSize(file.size);
    document.getElementById('fileType').textContent = file.type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

    // –ü–∞—Ä—Å–∏–º MediaInfo —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const tracks = parseMediaInfo(mediaInfo);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤–∫–ª–∞–¥–∫–∏
    fillSummaryInfo(tracks);
    fillGeneralInfo(tracks.general);
    fillVideoInfo(tracks.video);
    fillAudioInfo(tracks.audio);
    fillRawInfo(mediaInfo);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    document.getElementById('resultsSection').style.display = 'block';
}

// –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ MediaInfo
function parseMediaInfo(mediaInfo) {
    const tracks = {
        general: [],
        video: [],
        audio: []
    };

    // MediaInfo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –º–∞—Å—Å–∏–≤–æ–º —Ç—Ä–µ–∫–æ–≤
    if (mediaInfo && mediaInfo.media && mediaInfo.media.track) {
        mediaInfo.media.track.forEach(track => {
            const trackType = track['@type'];
            if (trackType === 'General') {
                tracks.general.push(track);
            } else if (trackType === 'Video') {
                tracks.video.push(track);
            } else if (trackType === 'Audio') {
                tracks.audio.push(track);
            }
        });
    }

    return tracks;
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function fillSummaryInfo(tracks) {
    const container = document.getElementById('summaryInfo');
    container.innerHTML = '';

    // –í–∏–¥–µ–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (tracks.video.length > 0) {
        tracks.video.forEach((track, index) => {
            const videoSection = document.createElement('div');
            videoSection.className = 'summary-section';
            
            const title = document.createElement('h4');
            title.innerHTML = `üé• –í–∏–¥–µ–æ${tracks.video.length > 1 ? ` ${index + 1}` : ''}`;
            videoSection.appendChild(title);
            
            const summaryText = document.createElement('div');
            summaryText.className = 'summary-text';
            
            const videoSummary = [];
            
            // –ö–æ–¥–µ–∫
            if (track.Format) {
                let codec = track.Format;
                if (track.Format_Profile) {
                    codec += ` (${track.Format_Profile})`;
                }
                videoSummary.push(`–ö–æ–¥–µ–∫: ${codec}`);
            }
            
            // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            if (track.Width && track.Height) {
                let resolution = `${track.Width}√ó${track.Height}`;
                if (track.DisplayAspectRatio) {
                    resolution += ` (${formatAspectRatio(track.DisplayAspectRatio)})`;
                }
                videoSummary.push(`–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: ${resolution}`);
            }
            
            // –ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤
            if (track.FrameRate) {
                videoSummary.push(`–ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤: ${formatValue('FrameRate', track.FrameRate)}`);
            }
            
            // –ë–∏—Ç—Ä–µ–π—Ç
            if (track.BitRate) {
                videoSummary.push(`–ë–∏—Ç—Ä–µ–π—Ç: ${formatValue('BitRate', track.BitRate)}`);
            }
            
            summaryText.textContent = videoSummary.length > 0 ? videoSummary.join(', ') : '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã';
            if (videoSummary.length === 0) {
                summaryText.className += ' no-data';
            }
            
            videoSection.appendChild(summaryText);
            container.appendChild(videoSection);
        });
    }

    // –ê—É–¥–∏–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (tracks.audio.length > 0) {
        tracks.audio.forEach((track, index) => {
            const audioSection = document.createElement('div');
            audioSection.className = 'summary-section';
            
            const title = document.createElement('h4');
            title.innerHTML = `üîä –ê—É–¥–∏–æ${tracks.audio.length > 1 ? ` ${index + 1}` : ''}`;
            audioSection.appendChild(title);
            
            const summaryText = document.createElement('div');
            summaryText.className = 'summary-text';
            
            const audioSummary = [];
            
            // –ö–æ–¥–µ–∫
            if (track.Format) {
                let codec = track.Format;
                if (track.Format_Profile) {
                    codec += ` (${track.Format_Profile})`;
                }
                audioSummary.push(`–ö–æ–¥–µ–∫: ${codec}`);
            }
            
            // –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
            if (track.SamplingRate) {
                audioSummary.push(`–ß–∞—Å—Ç–æ—Ç–∞: ${formatValue('SamplingRate', track.SamplingRate)}`);
            }
            
            // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤
            if (track.Channel_s_) {
                let channels = `${track.Channel_s_} –∫–∞–Ω–∞–ª–æ–≤`;
                if (track.ChannelLayout) {
                    channels += ` (${track.ChannelLayout})`;
                }
                audioSummary.push(`–ö–∞–Ω–∞–ª—ã: ${channels}`);
            } else if (track.ChannelLayout) {
                audioSummary.push(`–ö–∞–Ω–∞–ª—ã: ${track.ChannelLayout}`);
            }
            
            // –ë–∏—Ç—Ä–µ–π—Ç
            if (track.BitRate) {
                audioSummary.push(`–ë–∏—Ç—Ä–µ–π—Ç: ${formatValue('BitRate', track.BitRate)}`);
            }
            
            summaryText.textContent = audioSummary.length > 0 ? audioSummary.join(', ') : '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã';
            if (audioSummary.length === 0) {
                summaryText.className += ' no-data';
            }
            
            audioSection.appendChild(summaryText);
            container.appendChild(audioSection);
        });
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –≤–∏–¥–µ–æ, –Ω–∏ –∞—É–¥–∏–æ
    if (tracks.video.length === 0 && tracks.audio.length === 0) {
        const noDataSection = document.createElement('div');
        noDataSection.className = 'summary-section';
        
        const noDataText = document.createElement('div');
        noDataText.className = 'summary-text no-data';
        noDataText.textContent = '–í–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
        
        noDataSection.appendChild(noDataText);
        container.appendChild(noDataSection);
    }
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function fillGeneralInfo(generalTracks) {
    const container = document.getElementById('generalInfo');
    container.innerHTML = '';

    if (generalTracks.length === 0) {
        container.innerHTML = '<p>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>';
        return;
    }

    const track = generalTracks[0];
    const importantFields = [
        { key: 'CompleteName', label: '–ü–æ–ª–Ω–æ–µ –∏–º—è' },
        { key: 'Format', label: '–§–æ—Ä–º–∞—Ç' },
        { key: 'Format_Version', label: '–í–µ—Ä—Å–∏—è —Ñ–æ—Ä–º–∞—Ç–∞' },
        { key: 'FileSize', label: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞' },
        { key: 'Duration', label: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å' },
        { key: 'OverallBitRate', label: '–û–±—â–∏–π –±–∏—Ç—Ä–µ–π—Ç' },
        { key: 'Encoded_Date', label: '–î–∞—Ç–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è' },
        { key: 'Tagged_Date', label: '–î–∞—Ç–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è' }
    ];

    const grid = document.createElement('div');
    grid.className = 'info-grid';

    for (const field of importantFields) {
        const value = track[field.key];
        if (value) {
            const item = createInfoItem(field.label, formatValue(field.key, value));
            grid.appendChild(item);
        }
    }

    container.appendChild(grid);
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
function fillVideoInfo(videoTracks) {
    const container = document.getElementById('videoInfo');
    container.innerHTML = '';

    if (videoTracks.length === 0) {
        container.innerHTML = '<p>–í–∏–¥–µ–æ–¥–æ—Ä–æ–∂–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
        return;
    }

    videoTracks.forEach((track, index) => {
        const trackDiv = document.createElement('div');
        trackDiv.className = 'track-info';
        
        if (videoTracks.length > 1) {
            const title = document.createElement('h4');
            title.textContent = `–í–∏–¥–µ–æ–¥–æ—Ä–æ–∂–∫–∞ ${index + 1}`;
            trackDiv.appendChild(title);
        }

        const importantFields = [
            { key: 'Format', label: '–§–æ—Ä–º–∞—Ç' },
            { key: 'Format_Profile', label: '–ü—Ä–æ—Ñ–∏–ª—å —Ñ–æ—Ä–º–∞—Ç–∞' },
            { key: 'Width', label: '–®–∏—Ä–∏–Ω–∞' },
            { key: 'Height', label: '–í—ã—Å–æ—Ç–∞' },
            { key: 'DisplayAspectRatio', label: '–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω' },
            { key: 'FrameRate', label: '–ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤' },
            { key: 'BitRate', label: '–ë–∏—Ç—Ä–µ–π—Ç' },
            { key: 'ColorSpace', label: '–¶–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ' },
            { key: 'BitDepth', label: '–ë–∏—Ç–Ω–æ—Å—Ç—å' },
            { key: 'Duration', label: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å' }
        ];

        const grid = document.createElement('div');
        grid.className = 'info-grid';

        for (const field of importantFields) {
            const value = track[field.key];
            if (value) {
                const item = createInfoItem(field.label, formatValue(field.key, value));
                grid.appendChild(item);
            }
        }

        trackDiv.appendChild(grid);
        container.appendChild(trackDiv);
    });
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—É–¥–∏–æ
function fillAudioInfo(audioTracks) {
    const container = document.getElementById('audioInfo');
    container.innerHTML = '';

    if (audioTracks.length === 0) {
        container.innerHTML = '<p>–ê—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
        return;
    }

    audioTracks.forEach((track, index) => {
        const trackDiv = document.createElement('div');
        trackDiv.className = 'track-info';
        
        if (audioTracks.length > 1) {
            const title = document.createElement('h4');
            title.textContent = `–ê—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∞ ${index + 1}`;
            trackDiv.appendChild(title);
        }

        const importantFields = [
            { key: 'Format', label: '–§–æ—Ä–º–∞—Ç' },
            { key: 'Format_Profile', label: '–ü—Ä–æ—Ñ–∏–ª—å —Ñ–æ—Ä–º–∞—Ç–∞' },
            { key: 'Duration', label: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å' },
            { key: 'BitRate', label: '–ë–∏—Ç—Ä–µ–π—Ç' },
            { key: 'Channel_s_', label: '–ö–∞–Ω–∞–ª—ã' },
            { key: 'ChannelLayout', label: '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤' },
            { key: 'SamplingRate', label: '–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏' },
            { key: 'BitDepth', label: '–ë–∏—Ç–Ω–æ—Å—Ç—å' },
            { key: 'Language', label: '–Ø–∑—ã–∫' }
        ];

        const grid = document.createElement('div');
        grid.className = 'info-grid';

        for (const field of importantFields) {
            const value = track[field.key];
            if (value) {
                const item = createInfoItem(field.label, formatValue(field.key, value));
                grid.appendChild(item);
            }
        }

        trackDiv.appendChild(grid);
        container.appendChild(trackDiv);
    });
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function fillRawInfo(mediaInfo) {
    const rawInfoElement = document.getElementById('rawInfo');
    rawInfoElement.textContent = JSON.stringify(mediaInfo, null, 2);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
function formatValue(key, value) {
    if (!value) return '';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    if (key === 'Duration') {
        return formatDuration(value);
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if (key === 'FileSize' && !isNaN(value)) {
        return formatFileSize(parseInt(value));
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏—Ç—Ä–µ–π—Ç–∞
    if ((key === 'BitRate' || key === 'OverallBitRate') && !isNaN(value)) {
        return Math.round(parseInt(value) / 1000) + ' kbps';
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
    if (key === 'SamplingRate' && !isNaN(value)) {
        return Math.round(parseInt(value) / 1000) + ' kHz';
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∫–∞–¥—Ä–æ–≤
    if (key === 'FrameRate' && !isNaN(value)) {
        return parseFloat(value).toFixed(3) + ' fps';
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    if ((key === 'Width' || key === 'Height') && !isNaN(value)) {
        return value + ' px';
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
    if (key === 'DisplayAspectRatio') {
        return formatAspectRatio(value);
    }
    
    return value.toString();
}

// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function formatDuration(duration) {
    if (!duration) return '';
    
    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1h 23min 45s")
    if (typeof duration === 'string' && duration.includes('h')) {
        return duration;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM:SS"
    if (typeof duration === 'string' && duration.includes(':')) {
        return duration;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    let totalSeconds;
    if (typeof duration === 'string') {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ
        const parsed = parseFloat(duration);
        if (isNaN(parsed)) return duration; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        totalSeconds = parsed;
    } else {
        totalSeconds = parseFloat(duration);
    }
    
    // MediaInfo –æ–±—ã—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    if (totalSeconds > 3600000) { // –ï—Å–ª–∏ –±–æ–ª—å—à–µ —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        totalSeconds = totalSeconds / 1000; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
    }
    
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor((totalSeconds % 3600) / 60);
    const seconds = Math.floor(totalSeconds % 60);
    
    if (hours > 0) {
        return `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    } else {
        return `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }
}

// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
function formatAspectRatio(ratio) {
    if (!ratio) return '';
    
    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 16:9, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (typeof ratio === 'string' && ratio.includes(':')) {
        return ratio;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.778)
    const numericRatio = parseFloat(ratio);
    if (isNaN(numericRatio)) return ratio;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–∫–æ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
    const commonRatios = [
        { ratio: 16/9, display: '16:9' },
        { ratio: 4/3, display: '4:3' },
        { ratio: 21/9, display: '21:9' },
        { ratio: 1.85, display: '1.85:1' },
        { ratio: 2.35, display: '2.35:1' },
        { ratio: 2.39, display: '2.39:1' },
        { ratio: 1/1, display: '1:1' },
        { ratio: 3/2, display: '3:2' },
        { ratio: 5/4, display: '5:4' },
        { ratio: 16/10, display: '16:10' }
    ];
    
    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
    let closest = commonRatios[0];
    let minDifference = Math.abs(numericRatio - closest.ratio);
    
    for (const commonRatio of commonRatios) {
        const difference = Math.abs(numericRatio - commonRatio.ratio);
        if (difference < minDifference) {
            minDifference = difference;
            closest = commonRatio;
        }
    }
    
    // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è (–º–µ–Ω–µ–µ 0.01), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ
    if (minDifference < 0.01) {
        return closest.display;
    }
    
    // –ò–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–æ—Å—Ç—É—é –¥—Ä–æ–±—å
    const simplifiedRatio = simplifyRatio(numericRatio);
    if (simplifiedRatio) {
        return simplifiedRatio;
    }
    
    // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 2 –∑–Ω–∞–∫–æ–≤
    return numericRatio.toFixed(2) + ':1';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –¥–æ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª
function simplifyRatio(decimal) {
    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
    for (let denominator = 1; denominator <= 20; denominator++) {
        const numerator = Math.round(decimal * denominator);
        const calculatedRatio = numerator / denominator;
        
        if (Math.abs(calculatedRatio - decimal) < 0.005) {
            const gcd = findGCD(numerator, denominator);
            const simplifiedNum = numerator / gcd;
            const simplifiedDen = denominator / gcd;
            
            if (simplifiedNum <= 50 && simplifiedDen <= 50) {
                return `${simplifiedNum}:${simplifiedDen}`;
            }
        }
    }
    return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –æ–±—â–µ–≥–æ –¥–µ–ª–∏—Ç–µ–ª—è
function findGCD(a, b) {
    while (b !== 0) {
        const temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function createInfoItem(label, value) {
    const item = document.createElement('div');
    item.className = 'info-item';
    
    const labelSpan = document.createElement('span');
    labelSpan.className = 'label';
    labelSpan.textContent = label + ':';
    
    const valueSpan = document.createElement('span');
    valueSpan.className = 'value';
    valueSpan.textContent = value;
    
    item.appendChild(labelSpan);
    item.appendChild(valueSpan);
    
    return item;
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function showTab(tabName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    const tabs = document.querySelectorAll('.tab-pane');
    tabs.forEach(tab => tab.classList.remove('active'));
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –∫–Ω–æ–ø–æ–∫
    const buttons = document.querySelectorAll('.tab-btn');
    buttons.forEach(btn => btn.classList.remove('active'));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.getElementById(tabName + '-tab').classList.add('active');
    event.target.classList.add('active');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
function showLoading() {
    document.getElementById('loadingSection').style.display = 'block';
    document.getElementById('resultsSection').style.display = 'none';
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
    if (!document.getElementById('progressBar')) {
        const loadingSection = document.getElementById('loadingSection');
        
        const progressContainer = document.createElement('div');
        progressContainer.className = 'progress-container';
        progressContainer.innerHTML = `
            <div class="progress-bar-container">
                <div class="progress-bar" id="progressBar"></div>
            </div>
            <div class="progress-text" id="progressText">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...</div>
        `;
        
        loadingSection.appendChild(progressContainer);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function updateProgress(percent, text) {
    const progressBar = document.getElementById('progressBar');
    const progressText = document.getElementById('progressText');
    
    if (progressBar) {
        progressBar.style.width = percent + '%';
    }
    
    if (progressText) {
        progressText.textContent = text || `${Math.round(percent)}%`;
    }
}

// –°–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
function hideLoading() {
    document.getElementById('loadingSection').style.display = 'none';
}

// –°–±—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
function resetAnalyzer() {
    document.getElementById('resultsSection').style.display = 'none';
    document.getElementById('uploadSection').style.display = 'block';
    document.getElementById('fileInput').value = '';
    currentFileData = null;
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    const progressContainer = document.querySelector('.progress-container');
    if (progressContainer) {
        progressContainer.remove();
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
    if (window.gc) {
        window.gc();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function exportResults() {
    if (!currentFileData) return;

    const rawData = document.getElementById('rawInfo').textContent;
    const blob = new Blob([rawData], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = currentFileData.name + '_mediainfo.json';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}
